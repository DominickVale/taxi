{"version":3,"file":"taxi.modern.js","sources":["../src/helpers.js","../src/RouteStore.js","../src/Core.js","../src/Transition.js","../src/Renderer.js"],"sourcesContent":["const parser = new DOMParser()\n\n/**\n * Parse a HTML string into a proper Document.\n * @param {string|Document} html\n * @return {Document|*}\n */\nexport function parseDom(html) {\n\treturn typeof html === 'string' ? parser.parseFromString(html, 'text/html') : html\n}\n\n/**\n * Extract details from a given URL string. Assumed to be on the current TLD.\n * @param {string} url\n * @return {{raw: string, href: string, hasHash: boolean, pathname: string}}\n */\nexport function processUrl(url) {\n\tconst details = new URL(url, window.location.origin)\n\tlet normalized = null\n\n\tif (details.hash.length) {\n\t\tnormalized = url.replace(details.hash, '')\n\t}\n\n\treturn {\n\t\thasHash: details.hash.length > 0,\n\t\tpathname: details.pathname,\n\t\traw: url,\n\t\thref: normalized || details.href\n\t}\n}\n\n/**\n * Reloads a provided script/stylesheet by replacing with itself.\n * @param {HTMLElement} node\n */\nexport function reloadScript(node) {\n\tnode.parentNode.replaceChild(duplicateScript(node), node)\n}\n\n/**\n * Loads a provided script/stylesheet by appending a clone to the current document.\n * @param {HTMLElement} node\n */\nexport function appendScript(node) {\n\tif (node.parentNode.tagName === 'HEAD') {\n\t\tdocument.head.appendChild(duplicateScript(node))\n\t} else {\n\t\tdocument.body.appendChild(duplicateScript(node))\n\t}\n}\n\n/**\n * Creates a clone of a given HTMLElement\n * @param {HTMLElement} node\n * @return {HTMLElement}\n */\nexport function duplicateScript(node) {\n\tconst replacement = document.createElement('SCRIPT')\n\n\t// Loop Over Attributes\n\tfor (let k = 0; k < node.attributes.length; k++) {\n\t\t// Get Attribute\n\t\tconst attr = node.attributes[k]\n\n\t\t// Set Attribute\n\t\treplacement.setAttribute(attr.nodeName, attr.nodeValue)\n\t}\n\n\t// Inline Script\n\tif (node.innerHTML) {\n\t\treplacement.innerHTML = node.innerHTML\n\t}\n\n\treturn replacement\n}\n","export default class RouteStore {\n\t/**\n\t * @type {Map<string, Map<string, string>>}\n\t */\n\tdata = new Map()\n\n\t/**\n\t * @type {Map<string, RegExp>}\n\t */\n\tregexCache = new Map()\n\n\t/**\n\t *\n\t * @param {string} fromPattern\n\t * @param {string} toPattern\n\t * @param {string} transition\n\t */\n\tadd(fromPattern, toPattern, transition) {\n\t\tif (!this.data.has(fromPattern)) {\n\t\t\tthis.data.set(fromPattern, new Map())\n\t\t\tthis.regexCache.set(fromPattern, new RegExp(`^${fromPattern}$`))\n\t\t}\n\n\t\tthis.data.get(fromPattern).set(toPattern, transition)\n\t\tthis.regexCache.set(toPattern, new RegExp(`^${toPattern}$`))\n\t}\n\n\t/**\n\t *\n\t * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} currentUrl\n\t * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} nextUrl\n\t * @return {string|null}\n\t */\n\tfindMatch(currentUrl, nextUrl) {\n\t\t// Loop through all from patterns\n\t\tfor (const [fromPattern, potentialMatches] of this.data) {\n\t\t\t// If we have a match\n\t\t\tif (currentUrl.pathname.match(this.regexCache.get(fromPattern))) {\n\t\t\t\t// loop through all associated to patterns\n\t\t\t\tfor (const [toPattern, transition] of potentialMatches) {\n\t\t\t\t\t// If we find a match, return it\n\t\t\t\t\tif (nextUrl.pathname.match(this.regexCache.get(toPattern))) {\n\t\t\t\t\t\treturn transition\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn null\n\t}\n}\n","import E from '@unseenco/e'\r\nimport { appendScript, parseDom, processUrl, reloadScript } from './helpers'\r\nimport { Transition, Renderer } from './taxi'\r\nimport RouteStore from './RouteStore'\r\n\r\n/**\r\n * @typedef CacheEntry\r\n * @type {object}\r\n * @property {Renderer} renderer\r\n * @property {Document|Node} page\r\n * @property {array} scripts\r\n * @property {string} title\r\n * @property {HTMLElement|Element} content\r\n */\r\n\r\nexport default class Core {\r\n    isTransitioning = false\r\n\r\n    /**\r\n     * @type {CacheEntry|null}\r\n     */\r\n    currentCacheEntry = null\r\n\r\n    /**\r\n     * @type {Map<string, CacheEntry>}\r\n     */\r\n    cache = new Map()\r\n\r\n    /**\r\n     * @param {string} [parameters.links] Selector to select elements attach highway link events to\r\n     * @param {boolean} [parameters.removeOldContent] Whether the previous page's content should be removed just before onLeaveCompleted\r\n     * @param {Object.<string, Renderer>} [parameters.renderers] All Renderers for the application\r\n     * @param {Object.<string, Transition>} [parameters.transitions] All Transitions for the application\r\n     * @param {function(node: HTMLElement)} [parameters.reloadJsFilter]\r\n     */\r\n    constructor(parameters = {}) {\r\n        const {\r\n            links = 'a:not([target]):not([href^=\\\\#]):not([data-taxi-ignore])',\r\n            removeOldContent = true,\r\n            renderers = {\r\n                default: Renderer\r\n            },\r\n            transitions = {\r\n                default: Transition\r\n            },\r\n            reloadJsFilter = function (node) {\r\n                return !(node?.id === '__bs_script__' || node?.src.includes('browser-sync-client.js'))\r\n            }\r\n        } = parameters\r\n\r\n        this.renderers = renderers\r\n        this.transitions = transitions\r\n        this.defaultRenderer = this.renderers.default || Renderer\r\n        this.defaultTransition = this.transitions.default || Transition\r\n        this.wrapper = document.querySelector('[data-taxi]')\r\n        this.reloadJsFilter = reloadJsFilter\r\n        this.removeOldContent = removeOldContent\r\n        this.cache = new Map()\r\n\r\n        // Add delegated link events\r\n        this.attachEvents(links)\r\n\r\n        this.currentLocation = processUrl(window.location.href)\r\n\r\n        // as this is the initial page load, prime this page into the cache\r\n        this.cache.set(this.currentLocation.href, this.createCacheEntry(document.cloneNode(true)))\r\n\r\n        // fire the current Renderer enter methods\r\n        this.currentCacheEntry = this.cache.get(this.currentLocation.href)\r\n        this.currentCacheEntry.renderer.initialLoad()\r\n    }\r\n\r\n    /**\r\n     * @param {string} renderer\r\n     */\r\n    setDefaultRenderer(renderer) {\r\n        this.defaultRenderer = this.renderers[renderer]\r\n    }\r\n\r\n    /**\r\n     * @param {string} transition\r\n     */\r\n    setDefaultTransition(transition) {\r\n        this.defaultTransition = this.transitions[transition]\r\n    }\r\n\r\n    /**\r\n     * Registers a route into the RouteStore\r\n     *\r\n     * @param {string} fromPattern\r\n     * @param {string} toPattern\r\n     * @param {string} transition\r\n     */\r\n    addRoute(fromPattern, toPattern, transition) {\r\n        if (!this.router) {\r\n            this.router = new RouteStore()\r\n        }\r\n\r\n        this.router.add(fromPattern, toPattern, transition)\r\n    }\r\n\r\n    /**\r\n     * Prime the cache for a given URL\r\n     *\r\n     * @param {string} url\r\n     * @return {Promise}\r\n     */\r\n    preload(url) {\r\n        // convert relative URLs to absolute\r\n        url = processUrl(url).href\r\n\r\n        if (!this.cache.has(url)) {\r\n            return this.fetch(url)\r\n                .then(async (newPage) => {\r\n                    this.cache.set(url, this.createCacheEntry(newPage))\r\n                })\r\n        }\r\n\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Updates the HTML cache for the current URL\r\n     * Useful when adding/removing content via AJAX such as a search page or infinite loader\r\n     */\r\n    updateCache() {\r\n        const key = processUrl(window.location.href).href\r\n\r\n        if (this.cache.has(key)) {\r\n            this.cache.delete(key)\r\n            this.cache.set(key, this.createCacheEntry(document.cloneNode(true)))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the cache for a given URL.\r\n     * If no URL is passed, then cache for the current page is cleared.\r\n     *\r\n     * @param {string} [url]\r\n     */\r\n    clearCache(url) {\r\n        const key = processUrl(url || window.location.href).href\r\n\r\n        if (this.cache.has(key)) {\r\n            this.cache.delete(key)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} url\r\n     * @param {string|false} [transition]\r\n     * @param {string|false|HTMLElement} [trigger]\r\n     * @return {Promise<void|Error>}\r\n     */\r\n    navigateTo(url, transition = false, trigger = false) {\r\n        return new Promise((resolve, reject) => {\r\n            // Don't allow multiple navigations to occur at once\r\n            if (this.isTransitioning) {\r\n                reject(new Error('A transition is currently in progress'))\r\n                return\r\n            }\r\n\r\n            this.targetLocation = processUrl(url)\r\n\r\n            const TransitionClass = new (this.chooseTransition(transition))({ wrapper: this.wrapper })\r\n\r\n            this.beforeFetch(this.targetLocation, TransitionClass, trigger)\r\n                .then(async () => {\r\n                    if (this.cache.has(this.targetLocation.href)) {\r\n                        return await this.afterFetch(this.targetLocation, TransitionClass, this.cache.get(this.targetLocation.href), trigger)\r\n                    } else {\r\n                        return this.fetch(this.targetLocation.raw).then(async (newPage) => {\r\n                            return await this.afterFetch(this.targetLocation, TransitionClass, this.createCacheEntry(newPage), trigger)\r\n                        })\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    resolve()\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Add an event listener.\r\n     * @param {string} event\r\n     * @param {any} callback\r\n     */\r\n    on(event, callback) {\r\n        E.on(event, callback)\r\n    }\r\n\r\n    /**\r\n     * Remove an event listener.\r\n     * @param {string} event\r\n     * @param {any} [callback]\r\n     */\r\n    off(event, callback) {\r\n        E.off(event, callback)\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} url\r\n     * @param {Transition} TransitionClass\r\n     * @param {string|HTMLElement|false} trigger\r\n     * @return {Promise<void>}\r\n     */\r\n    beforeFetch(url, TransitionClass, trigger) {\r\n        this.isTransitioning = true\r\n\r\n        E.emit('NAVIGATE_OUT', {\r\n            from: this.currentCacheEntry,\r\n            trigger\r\n        })\r\n\r\n        return new Promise((resolve) => {\r\n            this.currentCacheEntry.renderer.leave(TransitionClass, trigger, this.removeOldContent)\r\n                .then(() => {\r\n                    if (trigger !== 'popstate') {\r\n                        window.history.pushState({}, '', url.raw)\r\n                    }\r\n\r\n                    resolve()\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} url\r\n     * @param {Transition} TransitionClass\r\n     * @param {CacheEntry} entry\r\n     * @param {string|HTMLElement|false} trigger\r\n     * @return {Promise<void>}\r\n     */\r\n    afterFetch(url, TransitionClass, entry, trigger) {\r\n        // add this page to cache\r\n        if (!this.cache.has(url.href)) {\r\n            this.cache.set(url.href, entry)\r\n        }\r\n\r\n        this.currentLocation = url\r\n\r\n        E.emit('NAVIGATE_IN', {\r\n            from: this.currentCacheEntry,\r\n            to: entry,\r\n            trigger\r\n        })\r\n\r\n        return new Promise((resolve) => {\r\n            entry.renderer.update()\r\n\r\n            this.loadScripts(entry.scripts)\r\n\r\n            entry.renderer.enter(TransitionClass, trigger)\r\n                .then(() => {\r\n                    E.emit('NAVIGATE_END', {\r\n                        from: this.currentCacheEntry,\r\n                        to: entry,\r\n                        trigger\r\n                    })\r\n\r\n                    this.currentCacheEntry = entry\r\n                    this.isTransitioning = false\r\n                    resolve()\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Load up scripts from the target page if needed\r\n     *\r\n     * @param {HTMLElement[]} cachedScripts\r\n     */\r\n    loadScripts(cachedScripts) {\r\n        const newScripts = [...cachedScripts]\r\n        const currentScripts = [...document.querySelectorAll('script:not([data-no-reload])')].filter(this.reloadJsFilter)\r\n\r\n        // loop through all new scripts\r\n        for (let i = 0; i < currentScripts.length; i++) {\r\n            for (let n = 0; n < newScripts.length; n++) {\r\n                if (currentScripts[i].outerHTML === newScripts[n].outerHTML) {\r\n                    reloadScript(currentScripts[i])\r\n                    newScripts.splice(n, 1)\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const script of newScripts) {\r\n            appendScript(script)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string} links\r\n     */\r\n    attachEvents(links) {\r\n        E.delegate('click', links, this.onClick)\r\n        E.on('popstate', window, this.onPopstate)\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {MouseEvent} e\r\n     */\r\n    onClick = (e) => {\r\n        if (!(e.metaKey || e.ctrlKey)) {\r\n            const target = processUrl(e.currentTarget.href)\r\n            this.currentLocation = processUrl(window.location.href)\r\n\r\n            // the target is a new URL, or is removing the hash from the current URL\r\n            if (this.currentLocation.href !== target.href || (this.currentLocation.hasHash && !target.hasHash)) {\r\n                e.preventDefault()\r\n                // noinspection JSIgnoredPromiseFromCall\r\n                this.navigateTo(target.raw, e.currentTarget.dataset.transition || false, e.currentTarget)\r\n                return\r\n            }\r\n\r\n            // a click to the current URL was detected\r\n            if (!this.currentLocation.hasHash && !target.hasHash) {\r\n                e.preventDefault()\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    onPopstate = () => {\r\n        // don't trigger for on-page anchors\r\n        if (window.location.pathname === this.currentLocation.pathname) {\r\n            return false\r\n        }\r\n\r\n        if (this.isTransitioning) {\r\n            // overwrite history state with current page if currently navigating\r\n            window.history.pushState({}, '', this.currentLocation.href)\r\n            return false\r\n        }\r\n\r\n        // noinspection JSIgnoredPromiseFromCall\r\n        this.navigateTo(window.location.href, false, 'popstate')\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string} url\r\n     * @return {Promise<Document>}\r\n     */\r\n    fetch(url) {\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                mode: 'same-origin',\r\n                method: 'GET',\r\n                headers: { 'X-Requested-With': 'Taxi' },\r\n                credentials: 'same-origin'\r\n            })\r\n                .then((response) => {\r\n                    if (!response.ok) {\r\n                        console.warn('Taxi encountered a non 2xx HTTP status code')\r\n                        window.location.href = url\r\n                    }\r\n\r\n                    return response.text()\r\n                })\r\n                .then((htmlString) => {\r\n                    resolve(parseDom(htmlString))\r\n                })\r\n                .catch((err) => {\r\n                    console.warn(err)\r\n                    window.location.href = url\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string|false} transition\r\n     * @return {Transition|function}\r\n     */\r\n    chooseTransition(transition) {\r\n        if (transition) {\r\n            return this.transitions[transition]\r\n        }\r\n\r\n        const routeTransition = this.router?.findMatch(this.currentLocation, this.targetLocation)\r\n\r\n        if (routeTransition) {\r\n            return this.transitions[routeTransition]\r\n        }\r\n\r\n        return this.defaultTransition\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Document|Node} page\r\n     * @return {CacheEntry}\r\n     */\r\n    createCacheEntry(page) {\r\n        const content = page.querySelector('[data-taxi-view]')\r\n        const Renderer = content.dataset.taxiView.length ? this.renderers[content.dataset.taxiView] : this.defaultRenderer\r\n\r\n        return {\r\n            page,\r\n            content,\r\n            scripts: [...page.querySelectorAll('script:not([data-no-reload])')].filter(this.reloadJsFilter),\r\n            title: page.title,\r\n            renderer: new Renderer({\r\n                wrapper: this.wrapper,\r\n                title: page.title,\r\n                content,\r\n                page\r\n            })\r\n        }\r\n    }\r\n}\r\n","export default class Transition {\r\n\t/**\r\n\t * @param {{wrapper: HTMLElement}} props\r\n\t */\r\n\tconstructor({ wrapper }) {\r\n\t\tthis.wrapper = wrapper\r\n\t}\r\n\r\n\t/**\r\n\t * @param {{ from: HTMLElement|Element, trigger: string|HTMLElement|false }} props\r\n\t * @return {Promise<void>}\r\n\t */\r\n\tleave(props) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onLeave({ ...props, done: resolve })\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @param {{ to: HTMLElement|Element, trigger: string|HTMLElement|false }} props\r\n\t * @return {Promise<void>}\r\n\t */\r\n\tenter(props) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onEnter({ ...props, done: resolve })\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the transition leaving the previous page.\r\n\t * @param {{from: HTMLElement|Element, trigger: string|HTMLElement|false, done: function}} props\r\n\t */\r\n\tonLeave({ from, trigger, done }) {\r\n\t\tdone()\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the transition entering the next page.\r\n\t * @param {{to: HTMLElement|Element, trigger: string|HTMLElement|false, done: function}} props\r\n\t */\r\n\tonEnter({ to, trigger, done }) {\r\n\t\tdone()\r\n\t}\r\n}\r\n","import Transition from \"./Transition\"\r\n\r\nexport default class Renderer {\r\n\t/**\r\n\t * @param {{content: HTMLElement|Element, page: Document|Node, title: string, wrapper: Element}} props\r\n\t */\r\n\tconstructor({ content, page, title, wrapper }) {\r\n\t\tthis._contentString = content.outerHTML\r\n\t\tthis.page = page\r\n\t\tthis.title = title\r\n\t\tthis.wrapper = wrapper\r\n\t\tthis.content = this.wrapper.lastElementChild\r\n\t}\r\n\r\n\tonEnter() {\r\n\r\n\t}\r\n\r\n\tonEnterCompleted() {\r\n\r\n\t}\r\n\r\n\tonLeave() {\r\n\r\n\t}\r\n\r\n\tonLeaveCompleted() {\r\n\r\n\t}\r\n\r\n\tinitialLoad() {\r\n\t\tthis.onEnter()\r\n\t\tthis.onEnterCompleted()\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tdocument.title = this.title\r\n\t\tthis.wrapper.insertAdjacentHTML('beforeend', this._contentString)\r\n\t\tthis.content = this.wrapper.lastElementChild\r\n\t}\r\n\r\n\tremove() {\r\n\t\tthis.wrapper.firstElementChild.remove()\r\n\t}\r\n\r\n\t/**\r\n\t * Called when transitioning into the current page.\r\n\t * @param {Transition} transition\r\n\t * @param {string|HTMLElement|false} trigger\r\n\t * @return {Promise<null>}\r\n\t */\r\n\tenter(transition, trigger) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onEnter()\r\n\r\n\t\t\ttransition.enter({ trigger, to: this.content })\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tthis.onEnterCompleted()\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Called when transitioning away from the current page.\r\n\t * @param {Transition} transition\r\n\t * @param {string|HTMLElement|false} trigger\r\n\t * @param {boolean} removeOldContent\r\n\t * @return {Promise<null>}\r\n\t */\r\n\tleave(transition, trigger, removeOldContent) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onLeave()\r\n\r\n\t\t\ttransition.leave({ trigger, from: this.content })\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tif (removeOldContent) {\r\n\t\t\t\t\t\tthis.remove()\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.onLeaveCompleted()\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n}\r\n"],"names":["parser","DOMParser","processUrl","url","details","URL","window","location","origin","normalized","hash","length","replace","hasHash","pathname","raw","href","appendScript","node","parentNode","tagName","document","head","appendChild","duplicateScript","body","replacement","createElement","k","attributes","attr","setAttribute","nodeName","nodeValue","innerHTML","RouteStore","data","Map","regexCache","add","fromPattern","toPattern","transition","this","has","set","RegExp","get","findMatch","currentUrl","nextUrl","potentialMatches","match","Core","constructor","parameters","isTransitioning","currentCacheEntry","cache","onClick","e","metaKey","ctrlKey","target","currentTarget","currentLocation","preventDefault","navigateTo","dataset","onPopstate","history","pushState","links","removeOldContent","renderers","default","Renderer","transitions","Transition","reloadJsFilter","id","src","includes","defaultRenderer","defaultTransition","wrapper","querySelector","attachEvents","createCacheEntry","cloneNode","renderer","initialLoad","setDefaultRenderer","setDefaultTransition","addRoute","router","preload","Promise","resolve","fetch","then","async","newPage","_this","updateCache","key","delete","clearCache","trigger","reject","Error","targetLocation","TransitionClass","chooseTransition","beforeFetch","_this2","afterFetch","on","event","callback","E","off","emit","from","leave","entry","to","update","loadScripts","scripts","enter","cachedScripts","newScripts","currentScripts","querySelectorAll","filter","i","n","outerHTML","replaceChild","splice","script","delegate","mode","method","headers","credentials","response","ok","console","warn","text","htmlString","html","parseFromString","catch","err","routeTransition","_this$router","page","content","taxiView","title","props","onLeave","done","onEnter","_contentString","lastElementChild","onEnterCompleted","onLeaveCompleted","insertAdjacentHTML","remove","firstElementChild"],"mappings":"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"}