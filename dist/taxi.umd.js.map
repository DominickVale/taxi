{"version":3,"file":"taxi.umd.js","sources":["../src/helpers.js","../src/RouteStore.js","../src/Core.js","../src/Transition.js","../src/Renderer.js"],"sourcesContent":["const parser = new DOMParser()\n\n/**\n * Parse a HTML string into a proper Document.\n * @param {string|Document} html\n * @return {Document|*}\n */\nexport function parseDom(html) {\n\treturn typeof html === 'string' ? parser.parseFromString(html, 'text/html') : html\n}\n\n/**\n * Extract details from a given URL string. Assumed to be on the current TLD.\n * @param {string} url\n * @return {{raw: string, href: string, hasHash: boolean, pathname: string}}\n */\nexport function processUrl(url) {\n\tconst details = new URL(url, window.location.origin)\n\tlet normalized = null\n\n\tif (details.hash.length) {\n\t\tnormalized = url.replace(details.hash, '')\n\t}\n\n\treturn {\n\t\thasHash: details.hash.length > 0,\n\t\tpathname: details.pathname,\n\t\traw: url,\n\t\thref: normalized || details.href\n\t}\n}\n\n/**\n * Reloads a provided script/stylesheet by replacing with itself.\n * @param {HTMLElement} node\n */\nexport function reloadScript(node) {\n\tnode.parentNode.replaceChild(duplicateScript(node), node)\n}\n\n/**\n * Loads a provided script/stylesheet by appending a clone to the current document.\n * @param {HTMLElement} node\n */\nexport function appendScript(node) {\n\tif (node.parentNode.tagName === 'HEAD') {\n\t\tdocument.head.appendChild(duplicateScript(node))\n\t} else {\n\t\tdocument.body.appendChild(duplicateScript(node))\n\t}\n}\n\n/**\n * Creates a clone of a given HTMLElement\n * @param {HTMLElement} node\n * @return {HTMLElement}\n */\nexport function duplicateScript(node) {\n\tconst replacement = document.createElement('SCRIPT')\n\n\t// Loop Over Attributes\n\tfor (let k = 0; k < node.attributes.length; k++) {\n\t\t// Get Attribute\n\t\tconst attr = node.attributes[k]\n\n\t\t// Set Attribute\n\t\treplacement.setAttribute(attr.nodeName, attr.nodeValue)\n\t}\n\n\t// Inline Script\n\tif (node.innerHTML) {\n\t\treplacement.innerHTML = node.innerHTML\n\t}\n\n\treturn replacement\n}\n","export default class RouteStore {\n\t/**\n\t * @type {Map<string, Map<string, string>>}\n\t */\n\tdata = new Map()\n\n\t/**\n\t * @type {Map<string, RegExp>}\n\t */\n\tregexCache = new Map()\n\n\t/**\n\t *\n\t * @param {string} fromPattern\n\t * @param {string} toPattern\n\t * @param {string} transition\n\t */\n\tadd(fromPattern, toPattern, transition) {\n\t\tif (!this.data.has(fromPattern)) {\n\t\t\tthis.data.set(fromPattern, new Map())\n\t\t\tthis.regexCache.set(fromPattern, new RegExp(`^${fromPattern}$`))\n\t\t}\n\n\t\tthis.data.get(fromPattern).set(toPattern, transition)\n\t\tthis.regexCache.set(toPattern, new RegExp(`^${toPattern}$`))\n\t}\n\n\t/**\n\t *\n\t * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} currentUrl\n\t * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} nextUrl\n\t * @return {string|null}\n\t */\n\tfindMatch(currentUrl, nextUrl) {\n\t\t// Loop through all from patterns\n\t\tfor (const [fromPattern, potentialMatches] of this.data) {\n\t\t\t// If we have a match\n\t\t\tif (currentUrl.pathname.match(this.regexCache.get(fromPattern))) {\n\t\t\t\t// loop through all associated to patterns\n\t\t\t\tfor (const [toPattern, transition] of potentialMatches) {\n\t\t\t\t\t// If we find a match, return it\n\t\t\t\t\tif (nextUrl.pathname.match(this.regexCache.get(toPattern))) {\n\t\t\t\t\t\treturn transition\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn null\n\t}\n}\n","import E from '@unseenco/e'\r\nimport { appendScript, parseDom, processUrl, reloadScript } from './helpers'\r\nimport { Transition, Renderer } from './taxi'\r\nimport RouteStore from './RouteStore'\r\n\r\n/**\r\n * @typedef CacheEntry\r\n * @type {object}\r\n * @property {Renderer} renderer\r\n * @property {Document|Node} page\r\n * @property {array} scripts\r\n * @property {string} title\r\n * @property {HTMLElement|Element} content\r\n */\r\n\r\nexport default class Core {\r\n    isTransitioning = false\r\n\r\n    /**\r\n     * @type {CacheEntry|null}\r\n     */\r\n    currentCacheEntry = null\r\n\r\n    /**\r\n     * @type {Map<string, CacheEntry>}\r\n     */\r\n    cache = new Map()\r\n\r\n    /**\r\n     * @param {string} [parameters.links] Selector to select elements attach highway link events to\r\n     * @param {boolean} [parameters.removeOldContent] Whether the previous page's content should be removed just before onLeaveCompleted\r\n     * @param {Object.<string, Renderer>} [parameters.renderers] All Renderers for the application\r\n     * @param {Object.<string, Transition>} [parameters.transitions] All Transitions for the application\r\n     * @param {function(node: HTMLElement)} [parameters.reloadJsFilter]\r\n     */\r\n    constructor(parameters = {}) {\r\n        const {\r\n            links = 'a:not([target]):not([href^=\\\\#]):not([data-taxi-ignore])',\r\n            removeOldContent = true,\r\n            renderers = {\r\n                default: Renderer\r\n            },\r\n            transitions = {\r\n                default: Transition\r\n            },\r\n            reloadJsFilter = function (node) {\r\n                return !(node?.id === '__bs_script__' || node?.src.includes('browser-sync-client.js'))\r\n            }\r\n        } = parameters\r\n\r\n        this.renderers = renderers\r\n        this.transitions = transitions\r\n        this.defaultRenderer = this.renderers.default || Renderer\r\n        this.defaultTransition = this.transitions.default || Transition\r\n        this.wrapper = document.querySelector('[data-taxi]')\r\n        this.reloadJsFilter = reloadJsFilter\r\n        this.removeOldContent = removeOldContent\r\n        this.cache = new Map()\r\n\r\n        // Add delegated link events\r\n        this.attachEvents(links)\r\n\r\n        this.currentLocation = processUrl(window.location.href)\r\n\r\n        // as this is the initial page load, prime this page into the cache\r\n        this.cache.set(this.currentLocation.href, this.createCacheEntry(document.cloneNode(true)))\r\n\r\n        // fire the current Renderer enter methods\r\n        this.currentCacheEntry = this.cache.get(this.currentLocation.href)\r\n        this.currentCacheEntry.renderer.initialLoad()\r\n    }\r\n\r\n    /**\r\n     * @param {string} renderer\r\n     */\r\n    setDefaultRenderer(renderer) {\r\n        this.defaultRenderer = this.renderers[renderer]\r\n    }\r\n\r\n    /**\r\n     * @param {string} transition\r\n     */\r\n    setDefaultTransition(transition) {\r\n        this.defaultTransition = this.transitions[transition]\r\n    }\r\n\r\n    /**\r\n     * Registers a route into the RouteStore\r\n     *\r\n     * @param {string} fromPattern\r\n     * @param {string} toPattern\r\n     * @param {string} transition\r\n     */\r\n    addRoute(fromPattern, toPattern, transition) {\r\n        if (!this.router) {\r\n            this.router = new RouteStore()\r\n        }\r\n\r\n        this.router.add(fromPattern, toPattern, transition)\r\n    }\r\n\r\n    /**\r\n     * Prime the cache for a given URL\r\n     *\r\n     * @param {string} url\r\n     * @return {Promise}\r\n     */\r\n    preload(url) {\r\n        // convert relative URLs to absolute\r\n        url = processUrl(url).href\r\n\r\n        if (!this.cache.has(url)) {\r\n            return this.fetch(url)\r\n                .then(async (newPage) => {\r\n                    this.cache.set(url, this.createCacheEntry(newPage))\r\n                })\r\n        }\r\n\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Updates the HTML cache for the current URL\r\n     * Useful when adding/removing content via AJAX such as a search page or infinite loader\r\n     */\r\n    updateCache() {\r\n        const key = processUrl(window.location.href).href\r\n\r\n        if (this.cache.has(key)) {\r\n            this.cache.delete(key)\r\n            this.cache.set(key, this.createCacheEntry(document.cloneNode(true)))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the cache for a given URL.\r\n     * If no URL is passed, then cache for the current page is cleared.\r\n     *\r\n     * @param {string} [url]\r\n     */\r\n    clearCache(url) {\r\n        const key = processUrl(url || window.location.href).href\r\n\r\n        if (this.cache.has(key)) {\r\n            this.cache.delete(key)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} url\r\n     * @param {string|false} [transition]\r\n     * @param {string|false|HTMLElement} [trigger]\r\n     * @return {Promise<void|Error>}\r\n     */\r\n    navigateTo(url, transition = false, trigger = false) {\r\n        return new Promise((resolve, reject) => {\r\n            // Don't allow multiple navigations to occur at once\r\n            if (this.isTransitioning) {\r\n                reject(new Error('A transition is currently in progress'))\r\n                return\r\n            }\r\n\r\n            this.targetLocation = processUrl(url)\r\n\r\n            const TransitionClass = new (this.chooseTransition(transition))({ wrapper: this.wrapper })\r\n\r\n            this.beforeFetch(this.targetLocation, TransitionClass, trigger)\r\n                .then(async () => {\r\n                    if (this.cache.has(this.targetLocation.href)) {\r\n                        return await this.afterFetch(this.targetLocation, TransitionClass, this.cache.get(this.targetLocation.href), trigger)\r\n                    } else {\r\n                        return this.fetch(this.targetLocation.raw).then(async (newPage) => {\r\n                            return await this.afterFetch(this.targetLocation, TransitionClass, this.createCacheEntry(newPage), trigger)\r\n                        })\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    resolve()\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Add an event listener.\r\n     * @param {string} event\r\n     * @param {any} callback\r\n     */\r\n    on(event, callback) {\r\n        E.on(event, callback)\r\n    }\r\n\r\n    /**\r\n     * Remove an event listener.\r\n     * @param {string} event\r\n     * @param {any} [callback]\r\n     */\r\n    off(event, callback) {\r\n        E.off(event, callback)\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} url\r\n     * @param {Transition} TransitionClass\r\n     * @param {string|HTMLElement|false} trigger\r\n     * @return {Promise<void>}\r\n     */\r\n    beforeFetch(url, TransitionClass, trigger) {\r\n        this.isTransitioning = true\r\n\r\n        E.emit('NAVIGATE_OUT', {\r\n            from: this.currentCacheEntry,\r\n            trigger\r\n        })\r\n\r\n        return new Promise((resolve) => {\r\n            this.currentCacheEntry.renderer.leave(TransitionClass, trigger, this.removeOldContent)\r\n                .then(() => {\r\n                    if (trigger !== 'popstate') {\r\n                        window.history.pushState({}, '', url.raw)\r\n                    }\r\n\r\n                    resolve()\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {{ raw: string, href: string, hasHash: boolean, pathname: string }} url\r\n     * @param {Transition} TransitionClass\r\n     * @param {CacheEntry} entry\r\n     * @param {string|HTMLElement|false} trigger\r\n     * @return {Promise<void>}\r\n     */\r\n    afterFetch(url, TransitionClass, entry, trigger) {\r\n        // add this page to cache\r\n        if (!this.cache.has(url.href)) {\r\n            this.cache.set(url.href, entry)\r\n        }\r\n\r\n        this.currentLocation = url\r\n\r\n        E.emit('NAVIGATE_IN', {\r\n            from: this.currentCacheEntry,\r\n            to: entry,\r\n            trigger\r\n        })\r\n\r\n        return new Promise((resolve) => {\r\n            entry.renderer.update()\r\n\r\n            this.loadScripts(entry.scripts)\r\n\r\n            entry.renderer.enter(TransitionClass, trigger)\r\n                .then(() => {\r\n                    E.emit('NAVIGATE_END', {\r\n                        from: this.currentCacheEntry,\r\n                        to: entry,\r\n                        trigger\r\n                    })\r\n\r\n                    this.currentCacheEntry = entry\r\n                    this.isTransitioning = false\r\n                    resolve()\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Load up scripts from the target page if needed\r\n     *\r\n     * @param {HTMLElement[]} cachedScripts\r\n     */\r\n    loadScripts(cachedScripts) {\r\n        const newScripts = [...cachedScripts]\r\n        const currentScripts = [...document.querySelectorAll('script:not([data-no-reload])')].filter(this.reloadJsFilter)\r\n\r\n        // loop through all new scripts\r\n        for (let i = 0; i < currentScripts.length; i++) {\r\n            for (let n = 0; n < newScripts.length; n++) {\r\n                if (currentScripts[i].outerHTML === newScripts[n].outerHTML) {\r\n                    reloadScript(currentScripts[i])\r\n                    newScripts.splice(n, 1)\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const script of newScripts) {\r\n            appendScript(script)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string} links\r\n     */\r\n    attachEvents(links) {\r\n        E.delegate('click', links, this.onClick)\r\n        E.on('popstate', window, this.onPopstate)\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {MouseEvent} e\r\n     */\r\n    onClick = (e) => {\r\n        if (!(e.metaKey || e.ctrlKey)) {\r\n            const target = processUrl(e.currentTarget.href)\r\n            this.currentLocation = processUrl(window.location.href)\r\n\r\n            // the target is a new URL, or is removing the hash from the current URL\r\n            if (this.currentLocation.href !== target.href || (this.currentLocation.hasHash && !target.hasHash)) {\r\n                e.preventDefault()\r\n                // noinspection JSIgnoredPromiseFromCall\r\n                this.navigateTo(target.raw, e.currentTarget.dataset.transition || false, e.currentTarget)\r\n                return\r\n            }\r\n\r\n            // a click to the current URL was detected\r\n            if (!this.currentLocation.hasHash && !target.hasHash) {\r\n                e.preventDefault()\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    onPopstate = () => {\r\n        // don't trigger for on-page anchors\r\n        if (window.location.pathname === this.currentLocation.pathname) {\r\n            return false\r\n        }\r\n\r\n        if (this.isTransitioning) {\r\n            // overwrite history state with current page if currently navigating\r\n            window.history.pushState({}, '', this.currentLocation.href)\r\n            return false\r\n        }\r\n\r\n        // noinspection JSIgnoredPromiseFromCall\r\n        this.navigateTo(window.location.href, false, 'popstate')\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string} url\r\n     * @return {Promise<Document>}\r\n     */\r\n    fetch(url) {\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                mode: 'same-origin',\r\n                method: 'GET',\r\n                headers: { 'X-Requested-With': 'Taxi' },\r\n                credentials: 'same-origin'\r\n            })\r\n                .then((response) => {\r\n                    if (!response.ok) {\r\n                        console.warn('Taxi encountered a non 2xx HTTP status code')\r\n                        window.location.href = url\r\n                    }\r\n\r\n                    return response.text()\r\n                })\r\n                .then((htmlString) => {\r\n                    resolve(parseDom(htmlString))\r\n                })\r\n                .catch((err) => {\r\n                    console.warn(err)\r\n                    window.location.href = url\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string|false} transition\r\n     * @return {Transition|function}\r\n     */\r\n    chooseTransition(transition) {\r\n        if (transition) {\r\n            return this.transitions[transition]\r\n        }\r\n\r\n        const routeTransition = this.router?.findMatch(this.currentLocation, this.targetLocation)\r\n\r\n        if (routeTransition) {\r\n            return this.transitions[routeTransition]\r\n        }\r\n\r\n        return this.defaultTransition\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Document|Node} page\r\n     * @return {CacheEntry}\r\n     */\r\n    createCacheEntry(page) {\r\n        const content = page.querySelector('[data-taxi-view]')\r\n        const Renderer = content.dataset.taxiView.length ? this.renderers[content.dataset.taxiView] : this.defaultRenderer\r\n\r\n        return {\r\n            page,\r\n            content,\r\n            scripts: [...page.querySelectorAll('script:not([data-no-reload])')].filter(this.reloadJsFilter),\r\n            title: page.title,\r\n            renderer: new Renderer({\r\n                wrapper: this.wrapper,\r\n                title: page.title,\r\n                content,\r\n                page\r\n            })\r\n        }\r\n    }\r\n}\r\n","export default class Transition {\r\n\t/**\r\n\t * @param {{wrapper: HTMLElement}} props\r\n\t */\r\n\tconstructor({ wrapper }) {\r\n\t\tthis.wrapper = wrapper\r\n\t}\r\n\r\n\t/**\r\n\t * @param {{ from: HTMLElement|Element, trigger: string|HTMLElement|false }} props\r\n\t * @return {Promise<void>}\r\n\t */\r\n\tleave(props) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onLeave({ ...props, done: resolve })\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @param {{ to: HTMLElement|Element, trigger: string|HTMLElement|false }} props\r\n\t * @return {Promise<void>}\r\n\t */\r\n\tenter(props) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onEnter({ ...props, done: resolve })\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the transition leaving the previous page.\r\n\t * @param {{from: HTMLElement|Element, trigger: string|HTMLElement|false, done: function}} props\r\n\t */\r\n\tonLeave({ from, trigger, done }) {\r\n\t\tdone()\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the transition entering the next page.\r\n\t * @param {{to: HTMLElement|Element, trigger: string|HTMLElement|false, done: function}} props\r\n\t */\r\n\tonEnter({ to, trigger, done }) {\r\n\t\tdone()\r\n\t}\r\n}\r\n","import Transition from \"./Transition\"\r\n\r\nexport default class Renderer {\r\n\t/**\r\n\t * @param {{content: HTMLElement|Element, page: Document|Node, title: string, wrapper: Element}} props\r\n\t */\r\n\tconstructor({ content, page, title, wrapper }) {\r\n\t\tthis._contentString = content.outerHTML\r\n\t\tthis.page = page\r\n\t\tthis.title = title\r\n\t\tthis.wrapper = wrapper\r\n\t\tthis.content = this.wrapper.lastElementChild\r\n\t}\r\n\r\n\tonEnter() {\r\n\r\n\t}\r\n\r\n\tonEnterCompleted() {\r\n\r\n\t}\r\n\r\n\tonLeave() {\r\n\r\n\t}\r\n\r\n\tonLeaveCompleted() {\r\n\r\n\t}\r\n\r\n\tinitialLoad() {\r\n\t\tthis.onEnter()\r\n\t\tthis.onEnterCompleted()\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tdocument.title = this.title\r\n\t\tthis.wrapper.insertAdjacentHTML('beforeend', this._contentString)\r\n\t\tthis.content = this.wrapper.lastElementChild\r\n\t}\r\n\r\n\tremove() {\r\n\t\tthis.wrapper.firstElementChild.remove()\r\n\t}\r\n\r\n\t/**\r\n\t * Called when transitioning into the current page.\r\n\t * @param {Transition} transition\r\n\t * @param {string|HTMLElement|false} trigger\r\n\t * @return {Promise<null>}\r\n\t */\r\n\tenter(transition, trigger) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onEnter()\r\n\r\n\t\t\ttransition.enter({ trigger, to: this.content })\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tthis.onEnterCompleted()\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Called when transitioning away from the current page.\r\n\t * @param {Transition} transition\r\n\t * @param {string|HTMLElement|false} trigger\r\n\t * @param {boolean} removeOldContent\r\n\t * @return {Promise<null>}\r\n\t */\r\n\tleave(transition, trigger, removeOldContent) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tthis.onLeave()\r\n\r\n\t\t\ttransition.leave({ trigger, from: this.content })\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tif (removeOldContent) {\r\n\t\t\t\t\t\tthis.remove()\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.onLeaveCompleted()\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n}\r\n"],"names":["parser","DOMParser","processUrl","url","details","URL","window","location","origin","normalized","hash","length","replace","hasHash","pathname","raw","href","appendScript","node","parentNode","tagName","document","head","appendChild","duplicateScript","body","replacement","createElement","k","attributes","attr","setAttribute","nodeName","nodeValue","innerHTML","RouteStore","data","Map","regexCache","add","fromPattern","toPattern","transition","this","has","set","RegExp","get","findMatch","currentUrl","nextUrl","potentialMatches","match","Core","parameters","isTransitioning","currentCacheEntry","cache","onClick","e","metaKey","ctrlKey","target","currentTarget","_this","currentLocation","preventDefault","navigateTo","dataset","onPopstate","history","pushState","links","removeOldContent","renderers","transitions","default","Transition","reloadJsFilter","id","src","includes","Renderer","defaultRenderer","defaultTransition","wrapper","querySelector","attachEvents","createCacheEntry","cloneNode","renderer","initialLoad","setDefaultRenderer","setDefaultTransition","addRoute","router","preload","Promise","resolve","fetch","then","newPage","_this2","updateCache","key","clearCache","trigger","reject","_this3","Error","targetLocation","TransitionClass","chooseTransition","beforeFetch","afterFetch","on","event","callback","E","off","emit","from","_this4","leave","entry","to","update","_this5","loadScripts","scripts","enter","cachedScripts","newScripts","currentScripts","querySelectorAll","filter","i","n","outerHTML","replaceChild","splice","delegate","mode","method","headers","credentials","response","ok","console","warn","text","htmlString","html","parseFromString","err","routeTransition","_this$router","page","content","taxiView","title","props","onLeave","done","onEnter","_contentString","lastElementChild","onEnterCompleted","onLeaveCompleted","insertAdjacentHTML","remove","firstElementChild"],"mappings":"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"}